<?php/*+---------------------------------------------------------------+|	e107 website system   .-:*'``'*:-.,_,.-:*'``'*:-.|	/class2.php||	©Steve Dunstan 2001-2002|	http://e107.org|	jalist@e107.org||	Released under the terms and conditions of the|	GNU General Public License (http://gnu.org).+---------------------------------------------------------------+*///------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//class db{	//	 global variables	var $mySQLserver;	var $mySQLuser;	var $mySQLpassword;	var $mySQLdefaultdb;	var $mySQLaccess;	var $mySQLresult;	var $mySQLrows;	var $mySQLerror;//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//	function db_Connect($mySQLserver, $mySQLuser, $mySQLpassword, $mySQLdefaultdb){		/*		# Connect to mySQL server and select database		#		# - parameters #1:		string $mySQLserver, mySQL server		# - parameters #2:		string $mySQLuser, mySQL username		# - parameters #3:		string $mySQLpassword, mySQL password		# - parameters #4:		string mySQLdefaultdb, mySQL default database		# - return				error if encountered		# - scope					public		*/		$this->mySQLserver = $mySQLserver;		$this->mySQLuser = $mySQLuser;		$this->mySQLpassword = $mySQLpassword;		$this->mySQLdefaultdb = $mySQLdefaultdb;		$temp = $this->mySQLerror;		$this->mySQLerror = FALSE;		$this->mySQL_access = @mysql_connect($this->mySQLserver, $this->mySQLuser, $this->mySQLpassword);		@mysql_select_db($this->mySQLdefaultdb);		$this->dbError("dbConnect/SelectDB");		return $this->mySQLerror = $temp;	}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//	function db_Select($table, $fields="*", $arg="", $mode="default"){		/*		# Select with args		#		# - parameter #1:	string $table, table name		# - parameter #2:	string $fields, table fields to be retrieved, default *		# - parameter #3:	string $arg, query arguaments, default null		# - parameter #4:	string $mode, arguament has WHERE or not, default=default (WHERE)		# - return				affected rows		# - scope					public		*/		global $dbq;		$dbq++;		$debug = 0;		$debugtable = "news";		if($arg != "" && $mode=="default"){			if($debug == TRUE && $debugtable == $table){ echo "SELECT ".$fields." FROM ".MUSER.$table." WHERE ".$arg."<br />"; }			if($this->mySQLresult = @mysql_query("SELECT ".$fields." FROM ".MUSER.$table." WHERE ".$arg)){				$this->dbError("dbQuery");				return $this->db_Rows();			}else{				$this->dbError("dbQuery ($query)");				return FALSE;			}		}else if($arg != "" && $mode != "default"){			if($debug == TRUE && $debugtable == $table){ echo "@@SELECT ".$fields." FROM ".MUSER.$table." ".$arg."<br />"; }			if($this->mySQLresult = @mysql_query("SELECT ".$fields." FROM ".MUSER.$table." ".$arg)){				$this->dbError("dbQuery");				return $this->db_Rows();			}else{				$this->dbError("dbQuery ($query)");				return FALSE;			}		}else{			if($debug == TRUE && $debugtable == $table){ echo "SELECT ".$fields." FROM ".MUSER.$table."<br />"; }			if($this->mySQLresult = @mysql_query("SELECT ".$fields." FROM ".MUSER.$table)){				$this->dbError("dbQuery");				return $this->db_Rows();			}else{				$this->dbError("db_Query ($query)");				return FALSE;			}				}	}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//	function db_Insert($table, $arg){		/*		# Insert with args		#		# - parameter #1:	string $table, table name		# - parameter #2:	string $arg, insert string		# - return				sql identifier, or error if (error reporting = on, error occured, boolean)		# - scope					public		*///		echo "INSERT INTO ".MUSER.$table." VALUES (".$arg.")";		if($result = $this->mySQLresult = @mysql_query("INSERT INTO ".MUSER.$table." VALUES (".$arg.")" )){			return $result;		}else{			$this->dbError("db_Insert ($query)");			return FALSE;		}	}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//	function db_Update($table, $arg){		/*		# Update with args		#		# - parameter #1:	string $table, table name		# - parameter #2:	string $arg, update string		# - return				sql identifier, or error if (error reporting = on, error occured, boolean)		# - scope					public		*/		$debug = 0;		$debugtable = "content";		if($debug == TRUE && $debugtable == $table){ echo "UPDATE ".MUSER.$table." SET ".$arg."<br />"; }			if($result = $this->mySQLresult = @mysql_query("UPDATE ".MUSER.$table." SET ".$arg)){				return $result;		}else{			$this->dbError("db_Update ($query)");			return FALSE;		}	}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//	function db_Fetch(){		/*		# Retrieve table row		#		# - parameters		none		# - return				result array, or error if (error reporting = on, error occured, boolean)		# - scope					public		*/		if($row = @mysql_fetch_array($this->mySQLresult)){			while (list($key,$val) = each($row)) {				$row[$key] = stripslashes($val);			}			$this->dbError("db_Fetch");			return $row;		}else{			$this->dbError("db_Fetch");			return FALSE;		}	}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//	function db_Count($table, $fields="(*)", $arg=""){		/*		# Retrieve result count		#		# - parameter #1:	string $table, table name		# - parameter #2:	string $fields, count fields, default (*)		# - parameter #3:	string $arg, count string, default null		# - return				result array, or error if (error reporting = on, error occured, boolean)		# - scope					public		*///		echo "SELECT COUNT".$fields." FROM ".MUSER.$table." ".$arg;		if($this->mySQLresult = @mysql_query("SELECT COUNT".$fields." FROM ".MUSER.$table." ".$arg)){			$rows = $this->mySQLrows = @mysql_fetch_array($this->mySQLresult);			return $rows[0];		}else{			$this->dbError("dbCount ($query)");		}	}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//	function db_Close(){		/*		# Close mySQL server connection		#		# - parameters		none		# - return				null		# - scope					public		*/		mysql_close();		$this->dbError("dbClose");	}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//	function db_Delete($table, $arg){		/*		# Delete with args		#		# - parameter #1:	string $table, table name		# - parameter #2:	string $arg, delete string		# - return				result array, or error if (error reporting = on, error occured, boolean)		# - scope					public		*///		echo "DELETE FROM ".MUSER.$table." WHERE ".$arg;			// debug		if($arg == ""){			if($result = $this->mySQLresult = @mysql_query("DELETE FROM ".MUSER.$table)){				return $result;			}else{				$this->dbError("db_Delete ($query)");				return FALSE;			}		}else{			if($result = $this->mySQLresult = @mysql_query("DELETE FROM ".MUSER.$table." WHERE ".$arg)){				return $result;			}else{				$this->dbError("db_Delete ($query)");				return FALSE;			}		}	}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//	function db_Rows(){		/*		# Return affected rows		#		# - parameters		none		# - return				affected rows, or error if (error reporting = on, error occured, boolean)		# - scope					public		*/		$rows = $this->mySQLrows = @mysql_num_rows($this->mySQLresult);		return $rows;		$this->dbError("db_Rows");	}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//	function dbError($from){		/*		# Return affected rows		#		# - parameter #1		string $from, routine that called this function		# - return				error message on mySQL error		# - scope					private		*/		if($error_message = @mysql_error()){			if($this->mySQLerror == TRUE){				echo "<b>mySQL Error!</b> Function: $from. [".@mysql_errno()." - $error_message]<br />";				return $error_message;			}		}	}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//	function db_SetErrorReporting($mode){		$this->mySQLerror = $mode;	}}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//class gettime{	function gettime(){		/* Constructor		# Get microtime		#		# - parameters		none		# - return				microtime		# - scope					public		*/		list($usec, $sec) = explode(" ",microtime()); 		return ((float)$usec + (float)$sec);     } }//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//class userlogin{	function userlogin($username, $userpass, $autologin){		/* Constructor		# Class called when user attempts to log in		#		# - parameters #1:		string $username, $_POSTED user name		# - parameters #2:		string $userpass, $_POSTED user password		# - return				boolean		# - scope					public		*/		$sql = new db;		if($username != "" && $userpass != ""){			$userpass = md5($userpass);			if(!$sql -> db_Select("user",  "*", "user_name='$username' ")){				define("LOGINMESSAGE", LAN_300);				return FALSE;			}else if(!$sql -> db_Select("user", "*", "user_name='$username' AND user_password='$userpass'")){				define("LOGINMESSAGE", LAN_301);				return FALSE;			}else if(!$sql -> db_Select("user", "*", "user_name='$username' AND user_password='$userpass' AND user_ban!=2 ")){				define("LOGINMESSAGE", LAN_302);				return FALSE;			}else{				list($user_id) = $sql-> db_Fetch();				if($autologin == 1){					setcookie('userkey', $user_id.".".$userpass, time()+3600*24*30, '/', '', 0);				}else{					setcookie('userkey', $user_id.".".$userpass, time()+3600, '/', '', 0);				}				if(e_QUERY ? header("Location: ".e_SELF."?".e_QUERY) : header("Location: ".e_SELF));				exit;			}		}else{			define("LOGINMESSAGE", LAN_27."<br /><br />");			return FALSE;		}	}}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//function getip(){	/*	# Get IP address	#	# - parameters		none	# - return				valid IP address	# - scope					public	*/	if(getenv('HTTP_X_FORWARDED_FOR')){		$ip = $_SERVER['REMOTE_ADDR'];		if(preg_match("/^([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)/", getenv('HTTP_X_FORWARDED_FOR'), $ip3)){			$ip2 = array('/^0\./', '/^127\.0\.0\.1/', '/^192\.168\..*/', '/^172\.16\..*/', '/^10..*/', '/^224..*/', '/^240..*/');			$ip = preg_replace($ip2, $ip, $ip3[1]);		}	}else{		$ip = $_SERVER['REMOTE_ADDR'];	}	if($ip == ""){ $ip = "x.x.x.x"; }	return $ip;}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//class floodprotect{	function flood($table, $orderfield){		/*		# Test for possible flood		#		# - parameter #1		string $table, table being affected		# - parameter #2		string $orderfield, date entry in respective table		# - return				boolean		# - scope					public		*/		$sql = new db;		if(FLOODPROTECTION == TRUE){			$sql -> db_Select($table, "*", "ORDER BY ".$orderfield." DESC LIMIT 1", $mode = "no_where");			$row = $sql -> db_Fetch();			if($row[$orderfield] > (time() - FLOODTIMEOUT)){				return FALSE;			}else{				return TRUE;			}		}else{			return TRUE;		}	}}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//function init_session(){		/*		# Validate session if exists		#		# - parameters		none		# - return				boolean		# - scope				public		*/	if(!$_COOKIE['userkey']){		define("USER", FALSE);		define("USERTHEME", FALSE);		define("ADMIN", FALSE);	}else{		$tmp = explode(".", $_COOKIE['userkey']); $uid = $tmp[0]; $upw = $tmp[1];		if(Empty($upw)){			setcookie('userkey', '', 0, '/', '', 0);			define("ADMIN", FALSE);			define("USER", FALSE);			return(FALSE);		}		$sql = new db;		if($sql -> db_Select("user", "*", "user_id='$uid' AND user_password='$upw' ")){			$result = $sql -> db_Fetch();			extract($result);			define("USERID", $user_id);			define("USERNAME", $user_name);			define("USEREMAIL", $user_email);			define("USER", TRUE);			define("USERLV", $user_lastvisit);			define("USERVIEWED", $user_viewed);			define("USERCLASS", $user_class);			define("USER_PREF", $user_prefs);			$user_pref = unserialize(USER_PREF);			if($user_pref['sitetheme'] && @fopen(e_BASE."themes/".$user_pref['sitetheme']."/theme.php","r")){				define("USERTHEME", $user_pref['sitetheme']);			}else{				define("USERTHEME", FALSE);			}			if($user_currentvisit + 3600 < time()){				$sql -> db_Update("user", "user_visits=user_visits+1 WHERE user_name='".USERNAME."' ");				$sql -> db_Update("user", "user_lastvisit='$user_currentvisit', user_currentvisit='".time()."', user_viewed='$r' WHERE user_name='".USERNAME."' ");			}			if($user_admin){				define("ADMIN", TRUE);				define("ADMINID", $user_id);				define("ADMINNAME", $user_name);				define("ADMINPERMS", $user_perms);				define("ADMINEMAIL", $user_email);				define("ADMINPWCHANGE", $user_pwchange);			}else{				define("ADMIN", FALSE);			}		}else{			define("USER", FALSE);			define("USERTHEME", FALSE);			define("ADMIN", FALSE);		}	}}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//function ban(){	$sql = new db;	if($sql -> db_Select("banlist", "*", "banlist_ip='".$_SERVER['REMOTE_ADDR']."' || banlist_ip='".USEREMAIL."' ")){exit;}}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////initialise			set_error_handler("error_handler");			ob_start();			$timing_start = explode(' ', microtime());//			ini_set("display_errors", "1");//			error_reporting(E_ALL & ~E_NOTICE);//			ini_set("include_path", "/");			if(!get_magic_quotes_runtime ()){ set_magic_quotes_runtime(1); }			$admin_directory = "admin";			@include("../config.php"); 			if(!defined("e_HTTP")){				@include("config.php");			}			if(!defined("e_HTTP")){				header("Location:install.php");				exit;			}			$url_prefix=substr($_SERVER['PHP_SELF'],strlen(e_HTTP),strrpos($_SERVER['PHP_SELF'],"/")+1-strlen(e_HTTP));			$num_levels=substr_count($url_prefix,"/");			for($i=1;$i<=$num_levels;$i++){				$link_prefix.="../";			}			define("e_ADMIN", e_HTTP.$admin_directory."/");			define("e_SELF", "http://".$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF']);			define("e_QUERY", eregi_replace("&|/?PHPSESSID.*", "", $_SERVER['QUERY_STRING']));			define('e_BASE',$link_prefix);			$e_path = (!strpos($_SERVER['SCRIPT_FILENAME'], ".php") ? $_SERVER['PATH_TRANSLATED'] : $_SERVER['SCRIPT_FILENAME']);			define("e_PATH", $e_path);			if($mySQLuser == ""){ header("location:install.php"); }			define("MUSER", $mySQLprefix);			$sql = new db;			$sql -> db_SetErrorReporting(FALSE);			$sql -> db_Connect($mySQLserver, $mySQLuser, $mySQLpassword, $mySQLdefaultdb);						$sql -> db_Select("core", "*", "e107_name='pref' ");			$row = $sql -> db_Fetch();			$pref=stripslashes(unserialize($row['e107_value']));			if(!$pref['sitetheme'][1]){				$pref=unserialize($row['e107_value']);			}			if(!$pref['sitetheme'][1]){				header("location: fe.php");				exit;			}			$sql -> db_Delete("tmp", "tmp_time < '".(time()-300)."' ");			if($pref['flood_protect'][1] == 1){				$sql -> db_Delete("flood", "flood_time+'".$pref['flood_time'][1]."'<'".time()."' ");				$sql -> db_Insert("flood", " '".$_SERVER['PHP_SELF']."', '".time()."' ");				$hits = $sql -> db_Count("flood", "(*)", "WHERE flood_url = '".$_SERVER['PHP_SELF']."' ");				if($hits > $pref['flood_hits'][1] && $pref['flood_hits'][1] != ""){					die("<div style=\"text-align:center\">Flood protection activated.</div>");				}			}						if(IsSet($_POST['settheme'])){				if($_POST['sitetheme'] == $pref['sitetheme'][1]){					$sql -> db_Update("user", "user_prefs='' WHERE user_id='".$_POST['tid']."' ");				}else{					$sql -> db_Select("user", "*", "user_id='".$_POST['tid']."' ");					$row = $sql -> db_Fetch();					extract($row);					$tmp = unserialize($user_prefs);					$tmp['sitetheme'] = $_POST['sitetheme'];					$up = serialize($tmp);					$sql -> db_Update("user", "user_prefs='$up' WHERE user_id='".$_POST['tid']."' ");				}			}			init_session();			if(e_QUERY == "logout"){				setcookie('userkey', '', 0, '/', '', 0);				header("Location:".e_HTTP."index.php");			}			ban();			define("SITENAME", $pref['sitename'][1]);			define("SITEURL", $pref['siteurl'][1]);			if(eregi("http:", $pref['sitebutton'][1]) ? define ("SITEBUTTON", $pref['sitebutton'][1]) : define("SITEBUTTON", e_HTTP.$pref['sitebutton'][1]));			define("SITETAG", $pref['sitetag'][1]);			define("SITEDESCRIPTION", $pref['sitedescription'][1]);			define("SITEADMIN", $pref['siteadmin'][1]);			define("SITEADMINEMAIL", $pref['siteadminemail'][1]);			define("SITEDISCLAIMER", str_replace("©", "&copy;", $pref['sitedisclaimer'][1]));			define("TIMEOFFSET", $pref['time_offset'][1]);			define("FLOODTIME", $pref['flood_time'][1]);			define("FLOODHITS", $pref['flood_hits'][1]);			if(USERTHEME != FALSE){				define("HTHEME", e_BASE."themes/".USERTHEME."/");				define("THEME", e_BASE."themes/".USERTHEME."/");			}else{				define("HTHEME", e_BASE."themes/".$pref['sitetheme'][1]."/");				define("THEME", e_BASE."themes/".$pref['sitetheme'][1]."/");			}						if($pref['anon_post'][1] ? define("ANON", TRUE) : define("ANON", FALSE));			if(Empty($pref['newsposts'][1]) ? define("ITEMVIEW", 13) : define("ITEMVIEW", $pref['newsposts'][1]));			if($pref['flood_protect'][1]){  define(FLOODPROTECT, TRUE); define(FLOODTIMEOUT, $pref['flood_timeout'][1]); }						require_once(HTHEME."theme.php");			$language =  $pref['sitelanguage'][1]; if(!$language){ $language = "English"; }			require_once(e_BASE."languages/lan_".$language.".php");			if(IsSet($_POST['userlogin'])){ $usr = new userlogin($_POST['username'], $_POST['userpass'], $_POST['autologin']); }							if($CUSTOMPAGES != "" && eregi(substr(strrchr(e_SELF, "/"), 1), $custompages)){				define ("HEADERF", e_BASE."themes/templates/header".$custompageheader.".php");				define ("FOOTERF", e_BASE."themes/templates/footer".$custompagefooter.".php");			}else{				define ("HEADERF", e_BASE."themes/templates/header".$layout.".php");				define ("FOOTERF", e_BASE."themes/templates/footer".$layout.".php");			}			define("LOGINMESSAGE", "");			if($pref['maintainance_flag'][1] && ADMIN == FALSE){				header("location:".e_BASE."sitedown.php"); exit;			}			$ns = new table;//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//class auth{		function authform(){		/*		# Admin auth login		#		# - parameters		none		# - return				null		# - scope					public		*/		echo "<div style=\"align:center\">";		$text =  "<form method=\"post\" action=\"".e_SELF."\">\n<table style=\"width:40%\" align=\"center\"><tr><td style=\"width:15%\" class=\"defaulttext\">".LAN_16."</td><td><input class=\"tbox\" type=\"text\" name=\"authname\" size=\"30\" value=\"$authname\" maxlength=\"20\" />\n</td></tr><tr><td style=\"width:15%\" class=\"defaulttext\">".LAN_17."</td><td><input class=\"tbox\" type=\"password\" name=\"authpass\" size=\"30\" value=\"\" maxlength=\"20\" />\n</td></tr><tr><td style=\"width:15%\"></td><td><input class=\"button\" type=\"submit\" name=\"authsubmit\" value=\"Log In\" /> </td></tr></table>";$au = new table;$au -> tablerender(LAN_18, $text);echo "</div>";	}	function authcheck($authname, $authpass){		/*		# Admin auth check		# - parameter #1:		string $authname, entered name		# - parameter #2:		string $authpass, entered pass		# - return				boolean if fail, else result array		# - scope					public		*/		$sql_auth = new db;		if($sql_auth -> db_Select("user", "*", "user_name='$authname' AND user_admin='1' ")){			if($sql_auth -> db_Select("user", "*", "user_name='$authname' AND user_password='".md5($authpass)."' AND user_admin='1' ")){				$row = $sql_auth -> db_Fetch();				return $row;			}else{				$row = array("fop");				return $row;			}		}else{			$row = array("fon");			return $row;		}	}}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//class table{	function tablerender($caption, $text, $mode="default"){		/*		# Render style table		# - parameter #1:		string $caption, caption text		# - parameter #2:		string $text, body text		# - return				null		# - scope					public		*/		tablestyle($caption, $text, $mode);	}}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//class textparse{	function tp($text, $mode="off", $len=6){		/*		# Pre parse		# - parameter #1:		string $text, text to parse		# - parameter #2:		string $mode, on=HTML allowed, default off		# - return					parsed text		# - scope					public		*/		if($mode == "off"){			$text = strip_tags($text);		}		$search = array();		$replace = array();		$search[0] = "/\[blockquote\](.*?)\[\/blockquote\]/si";		$replace[0] = '<div class=\"indent\">\1</div>';		$search[1] = "/\[b\](.*?)\[\/b\]/si";		$replace[1] = '<b>\1</b>';		$search[2] = "/\[i\](.*?)\[\/i\]/si";		$replace[2] = '<i>\1</i>';		$search[3] = "/\[img\](.*?)\[\/img\]/si";		$replace[3] = '<img alt=\"\" src=\"\1\" />';		$search[4] = "/\[center\](.*?)\[\/center\]/si";		$replace[4] = '<div style=\"text-align:center\">\1</div>';		$search[5] = "/\[left\](.*?)\[\/left\]/si";		$replace[5] = '<div style=\"text-align:left\">\1</div>';		$search[6] = "/\[right\](.*?)\[\/right\]/si";		$replace[6] = '<div style=\"text-align:right\">\1</div>';		$search[7] = "/\[code\](.*?)\[\/code\]/si";		$replace[7] = '<code>\1</code>';		$search[8] = "/\[quote=(.*?)\](.*?)\[\/quote\]/si";		$replace[8] = '<div class=\"indent\"><i>Originally posted by \1</i> ...<br />\"\2\"</div>';		$search[9] = "#\[link\]([a-z]+?://){1}(.*?)\[/link\]#si";		$replace[9] = '<a href="\1\2">\1\2</a>';		$search[10] = "#\[link\](.*?)\[/link\]#si";		$replace[10] = '<a href="http://\1">\1</a>';		$search[11] = "#\[link=([a-z]+?://){1}(.*?)\](.*?)\[/link\]#si";		$replace[11] = '<a href="\1\2">\3</a>';		$search[12] = "#\[link=(.*?)\](.*?)\[/link\]#si";		$replace[12] = '<a href="http://\1">\2</a>';		$search[13] = "#\[email\](.*?)\[/email\]#si";		$replace[13] = '<a href="mailto:\1">\1</a>';		$search[14] = "#\[email=(.*?){1}(.*?)\](.*?)\[/email\]#si";		$replace[14] = '<a href="mailto:\1\2">\3</a>';		$search[15] = "#\[url\]([a-z]+?://){1}(.*?)\[/url\]#si";		$replace[15] = '<a href="\1\2">\1\2</a>';		$search[16] = "#\[url\](.*?)\[/url\]#si";		$replace[16] = '<a href="http://\1">\1</a>';		$search[17] = "#\[url=([a-z]+?://){1}(.*?)\](.*?)\[/url\]#si";		$replace[17] = '<a href="\1\2">\3</a>';		$search[18] = "/\[u\](.*?)\[\/u\]/si";		$replace[18] = '<u>\1</u>';		$search[19] = "/\[br]/si";		$replace[19] = '<br />';		$text = preg_replace($search, $replace, $text);//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//	if(defined("MQ")){		$search = array("\"", "'", "\\");		$replace = array("&quot;", "&#39;", "&#92;");		$text = str_replace($search, $replace, $text);		$text = str_replace("<a href=&quot;", "<a href=\"", $text);		$text = str_replace("&quot;>", "\">", $text);	}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//		addslashes($text);		$text = trim(chop($text));		return($text);	}		function editparse($text, $mode="off"){		/*		# Edit parse		# - parameter #1:		string $text, text to parse		# - parameter #2:		string $mode, on=links not parsed, default=off		# - return				parsed text		# - scope					public		*/		$text = stripslashes($text);		$search = array();		$replace = array();		$search[0] = "/\<div class=\"indent\"\>\<i\>Originally posted by (.*?)\<\/i\>\<br \/\>\"(.*?)\"\<\/div\>/si";		$replace[0] = '[quote=\1]\2[/quote]';		$search[1] = "/\<div class=\"indent\"\>\<i\>Originally posted by (.*?)\<\/i\> ...\<br \/\>\"(.*?)\"\<\/div\>/si";		$replace[1] = '[quote=\1]\2[/quote]';		$search[2] = "/\<div class=\"indent\"\>(.*?)\<\/div\>/si";		$replace[2] = '[blockquote]\1[/blockquote]';		$search[3] = "/\<b>(.*?)\<\/b\>/si";		$replace[3] = '[b]\1[/b]';		$search[4] = "/\<i>(.*?)\<\/i\>/si";		$replace[4] = '[i]\1[/i]';		$search[5] = "/\<u>(.*?)\<\/u\>/si";		$replace[5] = '[u]\1[/u]';		$search[6] = "/\<img alt=\"\" src=\"(.*?)\" \/>/si";		$replace[6] = '[img]\1[/img]';		$search[7] =  "/\<div style=\"text-align:center\"\>(.*?)\<\/div\>/si";		$replace[7] = '[center]\1[/center]';		$search[8] =  "/\<div style=\"text-align:left\"\>(.*?)\<\/div\>/si";		$replace[8] = '[left]\1[/left]';		$search[9] =  "/\<div style=\"text-align:right\"\>(.*?)\<\/div\>/si";		$replace[9] = '[right]\1[/right]';		$search[10] = "/\<code>(.*?)\<\/code\>/si";		$replace[10] = '[code]\1[/code]';		if($mode == "off"){			$search[11] = "/\<a href=\"(.*?)\">(.*?)<\/a>/si";			$replace[11] = '[link=\\1]\\2[/link]';		}				$text = preg_replace($search, $replace, $text);		return $text;	}//<div class="indent"><i>Originally posted by jalist</i> ...<br />"Quoted text."</div>	function tpa($text, $mode="off"){		/*		# Post parse		# - parameter #1:		string $text, text to parse		# - parameter #2:		string $mode, on=line breaks not replaced, default off		# - return					parsed text		# - scope					public		*/		global $pref;		if($pref['profanity_filter'][1] == 1){			$prof = LAN_24;			$text = eregi_replace($prof, $pref['profanity_replace'][1], $text);		}		if($pref['smiley_activate'][1] == 1){			require_once(e_BASE."plugins/emoticons.php");			$text = emoticons($text);		}		$search = "/\[quote=(.*?)\](.*?)\[\/quote\]/si";		$replace = '<div class=\"indent\"><i>Originally posted by \1</i> ...<br />\"\2\"</div>';		$text = preg_replace($search, $replace, $text);		$search = array("[b]", "[/b]", "[i]", "[/i]", "[u]", "[/u]", "[img]", "[/img]", "[center]", "[/center]", "[left]", "[/left]", "[right]", "[/right]", "[blockquote]", "[/blockquote]", "[code]", "[/code]");		$replace = array("<b>", "</b>", "<i>", "</i>", "<u>", "</u>", "<img alt=\"\" src=\"", "\" />", "<div style=\"text-align:center\">", "</div>", "<div style=\"text-align:left\">", "</div>", "<div style=\"text-align:right\">", "</div>", "<span class=\"indent\">", "</span>", "<code>", "</code>");		$text = str_replace($search,$replace, $text);		$text = str_replace("<br>","<br />", $text);	//	$text = str_replace("\\", "\\\\", $text);		$text = stripslashes($text);		if($mode == "off"){			$text = nl2br($text);			$text = ereg_replace("<br /><br />", "<br />", $text);		}		// sent in by 'Anon' - thanks		$text = " " . $text;		$text = preg_replace("#([\t\r\n ])([a-z0-9]+?){1}://([\w\-]+\.([\w\-]+\.)*[\w]+(:[0-9]+)?(/[^ \"\n\r\t<]*)?)#i", '\1<a href="\2://\3">\2://\3</a>', $text);		$text = preg_replace("#([\t\r\n ])(www|ftp)\.(([\w\-]+\.)*[\w]+(:[0-9]+)?(/[^ \"\n\r\t<]*)?)#i", '\1<a href="http://\2.\3">\2.\3</a>', $text);		$text = preg_replace("#([\n ])([a-z0-9\-_.]+?)@([\w\-]+\.([\w\-\.]+\.)*[\w]+)#i", "\\1<a href=\"mailto:\\2@\\3\">\\2@\\3</a>", $text);		$text = substr($text, 1);	//	$text = str_replace('\\', '&#092;', $text);		return $text;	}}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//function sitelinks(){	/*	# Render style links	# - parameters		none	# - return				parsed text	# - scope					null	*/	$text = PRELINK;	if(ADMIN == TRUE){		$text .= LINKSTART."<a href=\"".e_ADMIN."admin.php\">Admin Area</a>".LINKEND."\n";	}	$sql = new db;	$sql -> db_Select("links", "*", "link_category='1' ORDER BY link_order ASC");	while($row = $sql -> db_Fetch()){		extract($row);				switch ($link_open) { 			case 1:				$link_append = " target=\"_blank\"";			break; 			case 2:			   $link_append = " target=\"_parent\"";			break;			case 3:			   $link_append = " target=\"_top\"";			break;			default:			   unset($link_append);		}		if(!eregi("http:", $link_url)){ $link_url = e_HTTP.$link_url; }		if($link_open == 4){			$text .=  LINKSTART."<a href=\"javascript:openwindow('".$link_url."')\">".$link_name."</a>".LINKEND."\n";		}else{			$text .=  LINKSTART."<a href=\"".$link_url."\"".$link_append.">".$link_name."</a>".LINKEND."\n";		}	}	$text .= POSTLINK;	if(LINKDISPLAY == 2){		$ns = new table;		$ns -> tablerender(LAN_183, $text);	}else{		echo $text;	}}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//class convert{		function convert_date($datestamp, $mode="long"){		/*		# Date convert		# - parameter #1:		string $datestamp, unix stamp		# - parameter #2:		string $mode, date format, default long		# - return				parsed text		# - scope					public		*/		global $pref;		$datestamp += (TIMEOFFSET*3600);		if($mode == "long"){			return strftime($pref['longdate'][1], $datestamp);		}else if($mode == "short"){			return strftime($pref['shortdate'][1], $datestamp);		}else{			return strftime($pref['forumdate'][1], $datestamp);		}	}}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//class nextprev{	function nextprev($url, $from, $view, $total, $td, $qs=""){		/*		# Next previous pages		# - parameter #1:		string $url, refer url		# - parameter #2:		int $from, start figure		# - parameter #3:		int $view, items per page		# - parameter #4:		int $total, total items		# - parameter #5:		string $td, comfort text		# - parameter #6:		string $qs, QUERY_STRIING, default null		# - return				null		# - scope					public		*/  if($total == 0){   return;  }  $ns = new table;  echo "<table style=\"width:100%\">  <tr>";  if($from > 1){   $s = $from-$view;   echo "<td style=\"width:33%\" class=\"nextprev\">";   if($qs != ""){		$text = "<div style=\"text-align:left\"><span class=\"smalltext\"><a href=\"".$url."?".$s.".".$qs."\">".LAN_25."</a></span></div>";   }else{		$text = "<div style=\"text-align:left\"><span class=\"smalltext\"><a href=\"".$url."?".$s."\">".LAN_25."</a></span></div>";   }   echo $text;  }else{   echo "<td style=\"width:33%\">&nbsp;";  }   echo "</td>\n<td style=\"width:34%\" class=\"nextprev\">";  $start = $from+1;  $finish = $from+$view;  if($finish>$total){   $finish = $total;  }  $text = "<div style=\"text-align:center\"><span class=\"smalltext\">$td $start - $finish of $total</span></div>";  echo $text;   $s = $from+$view;  if($s < $total){   echo "</td><td style=\"width:33%\" class=\"nextprev\">";   if($qs != ""){		$text = "<div style=\"text-align:right\"><span class=\"smalltext\"><a href=\"".$url."?".$s.".".$qs."\">".LAN_26."</a></span></div></td>";   }else{		$text = "<div style=\"text-align:right\"><span class=\"smalltext\"><a href=\"".$url."?".$s."\">".LAN_26."</a></span></div></td>";   }   echo $text;  }else{   echo "</td><td style=\"width:33%\">&nbsp;</td>";  }  echo "</tr>\n</table>"; }}function getperms($arg, $ap = ADMINPERMS){	if(ereg($arg.".", $ap) || $ap == "0"){		return TRUE;	}else{		return FALSE;	}}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------////------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//function check_class($var, $userclass=USERCLASS){	$debug=0;	if($debug){ echo "USERCLASS: ".$userclass.", \$var = $var : "; }	if(!defined("USERCLASS") || $userclass == ""){		if($debug){ echo "FALSE<br />"; }		return FALSE;	}	$tmp = explode(".", $userclass);	for($c=0; $c<=count($tmp); $c++){		if($tmp[$c] && ereg($tmp[$c], $var)){			if($debug){ echo "TRUE<br />"; }			return TRUE;		}	}	if($debug){  echo "FALSE<br />"; }	return FALSE;}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//function error_handler($type, $message, $file, $line, $context){	$debug_state = "ERROR";	switch($type){		case E_NOTICE:			if(eregi("NOTICE", $debug_state)){ echo "<b>e107 Notice: </b>".$message.", Line <b>".$line."</b> of <b>".$file."</b><br />"; }		break;		case E_WARNING:			if(eregi("WARNING", $debug_state)){ echo "<b>e107 Warning: A non fatal error has occurred </b>".$message.", Line <b>".$line."</b> of <b>".$file."</b><br />"; }		break;		case E_ERROR:			if(eregi("ERROR", $debug_state)){ echo "<b>e107 ERROR: A fatal error has occurred </b>".$message.", Line <b>".$line."</b> of <b>".$file."</b><br />"; }		break;	}	if(eregi("ECHOSTATE", $debug_state)){		echo "<br />Variable state when error occurred: <br>";		print_r($context);	}}//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//?>